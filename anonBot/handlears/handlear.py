from typing import Text
from aiogram import F, Router, Dispatcher
from aiogram import Bot
from aiogram.types import Message, CallbackQuery,  InlineKeyboardButton
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.methods import GetChatMember
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from sqlalchemy.ext.asyncio import AsyncSession


from Keyboards.keyboard_user import menu, post_photo_btn, no_photo_btn
from database.requests import orm_add_post, orm_registartion, orm_check_registration, orm_add_channel, orm_get_channels, orm_get_post, orm_get_posts, orm_info_post, orm_get_count_posts, orm_add_count_post, orm_get_admins, orm_edit_post

from localisation.russian import photos

router = Router()


#! –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

#–§—É–Ω–∫. –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É 
async def check_subscribtion(message, session, bot):
    status = 'False'
    for channel in await orm_get_channels(session):
        user_channel_status = await bot.get_chat_member(chat_id=f"@{channel.url}", user_id=message.from_user.id)
        if user_channel_status.status != 'left':
            status = 'True'
        else:
            status = 'False'
    return status   
async def check(message, session, bot: Bot):
    global mess
    if await check_subscribtion(message, session, bot) != 'True':
        markup = InlineKeyboardBuilder()
        data = await orm_get_channels(session)
        for i in data:
            markup.row(InlineKeyboardButton(text=i.channel_name, callback_data=str(i.id), url=f'https://t.me/{i.url}'))
        markup.row(InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check'))
        kb = markup.as_markup()
        mess = await message.answer(text="–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ!", reply_markup=kb)
        return False
    try:
        await message.answer_photo(photo=photos, caption=f'üåü –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!¬† \n–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–æ—Å—Ç ‚Äî –∞–Ω–æ–Ω–∏–º–Ω–æ üôà –∏–ª–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏–º–µ–Ω–∏ üë§. \n\n<i>‚ú® ‚Ä¢ –î–∞–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ —Å–º–æ–≥—É—Ç —É–∑–Ω–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –í–´ –Ω–∞–ø–∏—Å–∞–ª–∏ –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º –ø–æ—Å—Ç–µ.¬† \n‚ö°Ô∏è ‚Ä¢ –ê–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –∑–¥–µ—Å—å –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –≤ –Ω–∞—à–µ–º Instagram-–∞–∫–∫–∞—É–Ω—Ç–µ.¬† \nüîí ‚Ä¢ –û –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ —Å—Ç–æ–∏—Ç –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è.</i>\n\nü§î –ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ?¬† \n\nüéâüí¨', reply_markup=await menu(), parse_mode=ParseMode.HTML)
    except:
        await message.message.answer_photo(photo=photos, caption=f'üåü –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!¬† \n–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–æ—Å—Ç ‚Äî –∞–Ω–æ–Ω–∏–º–Ω–æ üôà –∏–ª–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏–º–µ–Ω–∏ üë§. \n\n<i>‚ú® ‚Ä¢ –î–∞–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ —Å–º–æ–≥—É—Ç —É–∑–Ω–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –í–´ –Ω–∞–ø–∏—Å–∞–ª–∏ –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º –ø–æ—Å—Ç–µ.¬† \n‚ö°Ô∏è ‚Ä¢ –ê–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –∑–¥–µ—Å—å –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –≤ –Ω–∞—à–µ–º Instagram-–∞–∫–∫–∞—É–Ω—Ç–µ.¬† \nüîí ‚Ä¢ –û –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ —Å—Ç–æ–∏—Ç –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è.</i>\n\nü§î –ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ?¬† \n\nüéâüí¨', reply_markup=await menu(), parse_mode=ParseMode.HTML)
 
    return True

#–•—ç–Ω–¥–ª–µ—Ä –ª–æ–≤–∏—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'
@router.callback_query(F.data.startswith('check'))
async def check_btn(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    if await check(callback, session, bot):
        await callback.message.delete()
        

#–•—ç–Ω–¥–ª–µ—Ä –ª–æ–≤–∏—Ç –∫–æ–º–∞–Ω–¥—É /start
@router.message(CommandStart())
async def registration (message: Message, session: AsyncSession, bot: Bot):
    res = await orm_check_registration(session, message.from_user.id)
    admin = False
    if res is None:
        if message.from_user.id == 1936623121:
            admin = True
        await orm_registartion(session, {
                "tg_id" : message.from_user.id,
                "tag" : message.from_user.username,
                "premium_status" : False,
                "admin_status" : admin,
                "moder_status": False,
                "stars" : 0,
                "count_all_posts" : 0})
        
    await check(message, session, bot)
        
#! –ö–æ–Ω–µ—Ü —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏




@router.callback_query(F.data.startswith('faq'))
async def faq(callback: CallbackQuery, session: AsyncSession):
    markup = InlineKeyboardBuilder()

    markup.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back_menu'))

    result = markup.as_markup()
    await callback.message.delete()
    await callback.message.answer(text='üëª –ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –∏–¥–µ—è–º–∏, –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏! üí°‚ú®\n\nüí¨ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?  \n\n1. –ù–∞–∂–º–∏—Ç–µ –≤ –º–µ–Ω—é [ /start ] –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å –∞–Ω–æ–Ω–∏–º–∫—É" üìù.\n\n2. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–≤–æ–µ–π –∞–Ω–æ–Ω–∏–º–∫–∏. ‚úçÔ∏è\n\n3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ —Ç–∞–∫–æ–≤–æ –∏–º–µ–µ—Ç—Å—è) üñº.\n\n4. –í—ã–±–µ—Ä–∏—Ç–µ, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–º –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –ù–ï –∞–Ω–æ–Ω–∏–º–Ω—ã–º ü§´/üë§.\n\n5. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –∏ –∂–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏! ‚è≥\n\nüì¢–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º –∏ –∑–Ω–∞–∫–æ–º—ã–º. –ß–µ–º –±–æ–ª—å—à–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äî —Ç–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è! ü§óüéâ', reply_markup=result)




@router.callback_query(F.data.startswith('publications'))
async def publications(callback: CallbackQuery, session: AsyncSession):
    data = await orm_get_posts(session, callback.from_user.id)
    markup = InlineKeyboardBuilder()
    await callback.message.delete()

    for id, post in enumerate(data[::-1]):
        markup.row(InlineKeyboardButton(text=f'{id+1} - {post.description[:20]}... | {post.date}', callback_data=f'post_{post.id}'))
    markup.row(InlineKeyboardButton(text='<- –ù–∞–∑–∞–¥', callback_data='back_menu'))

    result = markup.as_markup()
    text = '–í–æ—Ç —Ç–≤–æ–∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è! üòä\n\n‚Ä¢ –ù–∞–∂–º–∏ –Ω–∞ –ª—é–±—É—é –∞–Ω–æ–Ω–∏–º–∫—É –∏ –ø–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –æ–Ω–∞ –≤—ã–≥–ª—è–¥–∏—Ç.üîç'
    if len(data) < 1:
        text = '–û–π-–æ–π-–æ–π, –ø–æ—Ö–æ–∂–µ, —Ç—É—Ç –ø—É—Å—Ç–æ! üòÖ‚ú®'
    await callback.message.answer(text, reply_markup=result)



@router.callback_query(F.data.startswith('post_'))
async def info_post(callback: CallbackQuery, session: AsyncSession):
    markup = InlineKeyboardBuilder()
    data = await orm_info_post(session, callback.data.split('post_')[1])

    markup.row(InlineKeyboardButton(text='‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'edit_post_user_{callback.data.split('post_')[1]}'))
    markup.row(InlineKeyboardButton(text='<- –ù–∞–∑–∞–¥', callback_data='publications'))

    result = markup.as_markup() 
    if data[0].status == '–ù–µ –∞–Ω–æ–Ω–∏–º–Ω–æ':
        data[0].status = data[0].tg_tag
    await callback.message.edit_text(text=f"Anon ShymkentüçÅ\n\n‚Ä¢ {data[0].description}\n\n–ò—Å—Ç–æ—á–Ω–∏–∫ - {data[0].status}\n\n–°—Ç–∞—Ç—É—Å - –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è‚è≥", reply_markup=result)



@router.callback_query(F.data.startswith('back_menu'))
async def back_menu(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    await callback.message.delete()
    await callback.message.answer_photo(photo=photos, caption=f'üåü –ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}!¬† \n–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–æ—Å—Ç ‚Äî –∞–Ω–æ–Ω–∏–º–Ω–æ üôà –∏–ª–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏–º–µ–Ω–∏ üë§. \n\n<i>‚ú® ‚Ä¢ –î–∞–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –Ω–µ —Å–º–æ–≥—É—Ç —É–∑–Ω–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –≤ –∞–Ω–æ–Ω–∏–º–Ω–æ–º –ø–æ—Å—Ç–µ.¬† \n‚ö°Ô∏è ‚Ä¢ –ê–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –∑–¥–µ—Å—å –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –≤ –Ω–∞—à–µ–º Instagram-–∞–∫–∫–∞—É–Ω—Ç–µ.¬† \nüîí ‚Ä¢ –û –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ —Å—Ç–æ–∏—Ç –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è.</i>\n\nü§î –ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ?¬† \n\nüéâüí¨', reply_markup=await menu(), parse_mode=ParseMode.HTML)






#! FSM

class EditPostUser(StatesGroup):
    post_id = State()
    description = State()


@router.callback_query(StateFilter(None), F.data.startswith('edit_post_user_'))
async def get_desc(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–æ–Ω–∏–º–∫–∏. ‚úçÔ∏è')
    await state.update_data(post_id=callback.data.split('edit_post_user_')[1])
    await state.set_state(EditPostUser.description)


@router.message(EditPostUser.description, F.text)
async def edit_post(message: Message, session: AsyncSession, state: FSMContext):
    await state.update_data(description=message.text)
    data = await state.get_data()
    await orm_edit_post(session, data['post_id'], data['description'])

    markup = InlineKeyboardBuilder()
    markup.add(InlineKeyboardButton(text='üìñ –í–µ—Ä–Ω—É—Ç—Å—è –∫ –ø–æ—Å—Ç—É', callback_data=f'post_{data['post_id']}'))
    result=markup.as_markup()

    await message.answer('–ê–Ω–æ–Ω–∏–º–∫–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞! ‚úÖ', reply_markup=result)
    await state.clear()

class AddPost(StatesGroup):
    tg_id = State()
    tg_user = State()
    description = State()
    photo = State()
    status = State()






@router.callback_query(StateFilter(None), F.data.startswith('publich'))
async def publich_post(callback: CallbackQuery, session: AsyncSession, bot: Bot, state: FSMContext):
    data = await orm_get_count_posts(session, callback.from_user.id)
    if data.count_all_posts <6 and data.count_all_posts != 5:
        #await bot.delete_message(chat_id=callback.message.from_user.id, message_id=callback.message.message_id)
        await callback.message.delete()
        await callback.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–≤–æ–µ–π –∞–Ω–æ–Ω–∏–º–∫–∏. ‚úçÔ∏è')

        await state.set_state(AddPost.description)
    else:
        await callback.message.answer('–¢—ã –ø—Ä–µ–≤—ã—Å–∏–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –ø–æ—Å—Ç–æ–≤\n\n–î–æ–∂–¥–∏—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ—Å—Ç–æ–≤', reply_markyp=await menu())
        
        await state.clear()



@router.message(AddPost.description, F.text)
async def post_photo(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(description=message.text)
    await state.update_data(tg_id=message.from_user.id)
    await state.update_data(tg_user=f'@{message.from_user.username}')
    result = await state.get_data()
    await message.answer(f'–í–æ—Ç —Ç–∞–∫ –≤–æ—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–æ–Ω–∏–º–∫–∞:\n\nAnon ShymkentüçÅ\n\n‚Ä¢ {result['description']}\n\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ —Ç–∞–∫–æ–≤–æ –∏–º–µ–µ—Ç—Å—è) üñº.', reply_markup=await no_photo_btn())

    await state.set_state(AddPost.photo)

@router.callback_query(AddPost.photo, F.data.startswith('no_photo'))
async def no_photo(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await state.update_data(photo='None')
    data = await state.get_data()
    await callback.message.edit_text(f'–í–æ—Ç —Ç–∞–∫ –≤–æ—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–æ–Ω–∏–º–∫–∞:\n\nAnon ShymkentüçÅ\n\n‚Ä¢ {data['description']}\n\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n–í—ã–±–µ—Ä–∏—Ç–µ, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–º –∏–ª–∏ –ù–ï –∞–Ω–æ–Ω–∏–º–Ω–æ ü§´/üë§.', reply_markup=await post_photo_btn('defoult'))

    await state.set_state(AddPost.status)



@router.message(AddPost.photo, F.photo)
async def post_status(message: Message, bot: Bot, state: FSMContext):
    await state.update_data(photo=message.photo[-1].file_id)
    data = await state.get_data()
    await message.delete()
    await bot.send_photo(chat_id=message.from_user.id, photo=message.photo[-1].file_id, caption=f'–í–æ—Ç —Ç–∞–∫ –≤–æ—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–æ–Ω–∏–º–∫–∞:\n\nAnon ShymkentüçÅ\n\n‚Ä¢ {data['description']}\n\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî-\n–í—ã–±–µ—Ä–∏—Ç–µ, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–º –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å  –ù–ï –∞–Ω–æ–Ω–∏–º–Ω—ã–º ü§´/üë§.', reply_markup=await post_photo_btn('defoult'))

    await state.set_state(AddPost.status)

@router.callback_query(AddPost.status, F.data.startswith('anon'))
async def post_anawaiton_status(callback: CallbackQuery, state: FSMContext):
    await state.update_data(status='–ê–Ω–æ–Ω–∏–º–Ω–æ')
    await callback.message.edit_reply_markup(reply_markup=await post_photo_btn('anon'))

@router.callback_query(AddPost.status, F.data.startswith('not_anon'))
async def post_not_anon_status(callback: CallbackQuery, state: FSMContext):
    await state.update_data(status='–ù–µ –∞–Ω–æ–Ω–∏–º–Ω–æ')
    await callback.message.edit_reply_markup(reply_markup=await post_photo_btn('not_anon'))

@router.callback_query(AddPost.status, F.data.startswith('publich'))
async def publich_post(callback: CallbackQuery, session: AsyncSession, bot: Bot, state: FSMContext):
    markup = InlineKeyboardBuilder()
    data = await state.get_data()
    markup.add(InlineKeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='back_menu'))
    result = markup.as_markup() 
    try:
        await orm_add_post(session, {
            "description": data['description'],
            "tg_id": data['tg_id'],
            "tg_tag": data['tg_user'],
            "premium": False,
            "photo": data['photo'],
            "status": data['status'],
        })
        date = await orm_get_count_posts(session, callback.from_user.id)
        await orm_add_count_post(session, callback.from_user.id, date.count_all_posts+1)
        await callback.message.delete()
        
        if data['status'] == '–ù–µ –∞–Ω–æ–Ω–∏–º–Ω–æ':
            data['status'] = data['tg_user']

        if data['photo'] != 'None':
            await bot.send_photo(chat_id=callback.from_user.id, photo=data['photo'],  caption=f'‚úÖ –û—Ç–ª–∏—á–Ω–æ!\nüéâ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é\n--------\n–í–æ—Ç —Ç–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n\nAnon ShymkentüçÅ\n\n‚Ä¢ {data['description']}\n\n–ò—Å—Ç–æ—á–Ω–∏–∫ - {data['status']}\n--------\n–°—Ç–∞—Ç—É—Å - –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è‚è≥', reply_markup=result)
        else:
            await callback.message.answer(f'‚úÖ –û—Ç–ª–∏—á–Ω–æ!\n üéâ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é\n--------\n–í–æ—Ç —Ç–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n\nAnon ShymkentüçÅ\n\n‚Ä¢ {data['description']}\n\n–ò—Å—Ç–æ—á–Ω–∏–∫ - {data['status']}\n--------\n–°—Ç–∞—Ç—É—Å - –æ–∂–∏–¥–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏—è‚è≥', reply_markup=result)

        await state.clear()

        btns = InlineKeyboardBuilder()
        btns.add(InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–æ–Ω–∏–º–∫–∏', callback_data='moder_posts'))
        result = btns.as_markup()
        admins = await orm_get_admins(session)
        for data in admins:
            await bot.send_message(chat_id=data.tg_id, text='‚ûï –ù–æ–≤–∞—è –∞–Ω–æ–Ω–∏–º–∫–∞!', reply_markup=result)

    except KeyError:
        await callback.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å!')

#! –ö–æ–Ω–µ—Ü FSM







